// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]

  @@index([username])
}

enum Role {
  ADMIN
  MEMBER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  MALE
  FEMALE
}

enum BodyShape {
  THIN
  SLIM
  NORMAL
  CHUBBY
  FAT
}

enum MBTI {
  INTJ
  INTP
  ENTJ
  ENTP
  INFJ
  INFP
  ENFJ
  ENFP
  ISTJ
  ISTP
  ESTJ
  ESTP
  ISFJ
  ISFP
  ESFJ
  ESFP
}

enum Religion {
  NONE
  CHRISTIAN
  CATHOLIC
  BUDDHIST
  OTHER
}

model BlindPreRegisteredMember {
  id          String @id @default(cuid())
  name        String
  phoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phoneNumber])
  @@index([phoneNumber])
}

model DraftBlindMember {
  id          String      @id @default(cuid())
  name        String
  phoneNumber String
  status      DraftStatus @default(PENDING)

  nickname  String
  gender    Gender
  birthYear Int
  residence String
  height    Float
  bodyShape String
  job       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlindMember {
  id          String       @id @default(cuid())
  name        String
  phoneNumber String
  status      MemberStatus @default(PENDING)

  nickname         String
  gender           Gender
  birthYear        Int
  residence        String
  height           Float
  bodyShape        String
  job              String
  selfIntroduction String

  blacklistedPhoneNumbers String[] @default([])

  matchesAsProposer   BlindMatch[] @relation(name: "proposer")
  matchesAsRespondent BlindMatch[] @relation(name: "respondent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phoneNumber])
  @@index([phoneNumber])
  @@index([gender])
  @@index([birthYear])
  @@index([status])
}

model BlindMatch {
  id           String           @id @default(cuid())
  proposer     BlindMember      @relation(fields: [proposerId], references: [id], onDelete: Cascade, name: "proposer")
  proposerId   String
  respondent   BlindMember      @relation(fields: [respondentId], references: [id], onDelete: Cascade, name: "respondent")
  respondentId String
  status       BlindMatchStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}

enum BlindMatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MatchStatus {
  BACKLOG
  PREPARING
  PENDING
  REJECTED
  ACCEPTED
  BROKEN_UP
}

model BasicMemberV2 {
  id                      String                   @id @default(cuid())
  legacyId                Int?                     @unique
  name                    String
  phoneNumber             String
  gender                  Gender
  birthYear               Int
  residence               String
  region                  Region?
  height                  Float
  weight                  Float?
  bmi                     Float?
  bodyShape               BodyShape?
  fashionStyles           FashionStyle[]
  eyelid                  Eyelid?
  customEyelid            String?
  confidentFacialBodyPart String?
  educationLevel          EducationLevel
  graduatedUniversity     String?
  occupationStatus        OccupationStatus?
  workplace               String?
  job                     String?
  currentSchool           String?
  mbti                    MBTI?
  isSmoker                Boolean
  isDrinker               Boolean
  alcoholConsumption      String?
  alcoholTolerance        String?
  religion                Religion
  annualIncome            AnnualIncome?
  assetsValue             AssetsValue?
  assetManagementApproach String?
  hobby                   String
  booksReadPerYear        BooksReadPerYear?
  bookTaste               String?
  leisureActivity         String?
  siblings                String?
  characteristics         String?
  tenYearFuture           String?
  plannedNumberOfChildren PlannedNumberOfChildren?
  lifePhilosophy          String?
  workPhilosophy          String?
  hasTattoo               Boolean
  exercisePerWeek         ExercisePerWeek
  exerciseType            String?
  hasCar                  Boolean
  doesGame                Boolean?
  gameType                String?
  hasPet                  Boolean
  datingStyle             String?
  contactStyle            String?
  contactFrequency        ContactFrequency?
  customContactFrequency  String?
  contactMethod           ContactMethod?
  customContactMethod     String?
  marriagePlan            String?
  selfIntroduction        String?
  images                  MemberImageV2[]
  videos                  MemberVideoV2[]
  audios                  MemberAudio[]

  idealType BasicMemberIdealTypeV2?

  memo String?

  lastMatchedAt DateTime @default(now())

  pendingMatches  BasicMatchV2[] @relation(name: "pendingMatchMemberV2")
  rejectedMatches BasicMatchV2[] @relation(name: "rejectedMatchMemberV2")
  acceptedMatches BasicMatchV2[] @relation(name: "acceptedMatchMemberV2")

  isMegaphoneUser            Boolean
  megaphoneMatchesAsSender   MegaphoneMatch[] @relation(name: "megaphoneMatchSender")
  megaphoneMatchesAsReceiver MegaphoneMatch[] @relation(name: "megaphoneMatchReceiver")

  blacklisting  BasicBlacklistItemV2[] @relation(name: "blacklisterV2")
  blacklistedBy BasicBlacklistItemV2[] @relation(name: "blacklistTargetV2")

  blacklistedPhoneNumbers String[] @default([])
  blacklistedNames        String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status  MemberStatus          @default(PENDING)
  profile BasicMemberProfileV2?

  referralCode        String
  discountCouponCount Int    @default(0)

  personalInfoConsent Boolean

  referrerCode String?

  // TODO: A(010-0000-0000)가 탈퇴하고 번호를 바꿈. 이후 B(010-0000-0000)가 가입했을 때 같은 사람으로 판단하면 안 됨. -> name, phoneNumber, gender, birthYear 모두 같아야 같은 사람으로 판단
  @@unique([phoneNumber])
  @@unique([referralCode])
  @@index([region])
  @@index([phoneNumber])
  @@index([name])
  @@index([gender])
  @@index([birthYear])
  @@index([height])
  @@index([educationLevel])
  @@index([isSmoker])
  @@index([religion])
  @@index([annualIncome])
  @@index([assetsValue])
  @@index([hasTattoo])
  @@index([exercisePerWeek])
  @@index([hasCar])
  @@index([hasPet])
  @@index([status])
  @@index([lastMatchedAt])
  @@index([referralCode])
  @@index([referrerCode])
  @@index([isMegaphoneUser])
}

model BasicMemberIdealTypeV2 {
  member   BasicMemberV2 @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String        @id

  minAgeBirthYear         Int?
  maxAgeBirthYear         Int?
  regions                 Region[]
  customRegion            String?
  minHeight               Int?
  maxHeight               Int?
  bodyShapes              BodyShape[]
  fashionStyles           FashionStyle[]
  eyelids                 Eyelid[]
  facialBodyPart          String?
  educationLevel          EducationLevel?
  schoolLevel             String?
  occupationStatuses      OccupationStatus[]
  nonPreferredWorkplace   String?
  nonPreferredJob         String?
  preferredMbtis          MBTI[]
  nonPreferredMbtis       MBTI[]
  isSmokerOk              Boolean
  drinkingFrequency       DrinkingFrequency?
  customDrinkingFrequency String?
  preferredReligions      Religion[]
  nonPreferredReligions   Religion[]
  minAnnualIncome         AnnualIncome?
  minAssetsValue          AssetsValue?
  hobby                   String?
  booksReadPerYear        BooksReadPerYear?
  characteristics         String?
  lifePhilosophy          String?
  isTattooOk              Boolean
  exercisePerWeek         ExercisePerWeek?
  shouldHaveCar           Boolean?
  isGamingOk              Boolean?
  isPetOk                 Boolean?
  idealTypeDescription    String?

  dealBreakers     BasicCondition[]
  highPriorities   BasicCondition[]
  mediumPriorities BasicCondition[]
  lowPriorities    BasicCondition[]
}

model DraftBasicMember {
  id                      String             @id @default(cuid())
  name                    String
  phoneNumber             String
  gender                  Gender
  marriageStatus          MarriageStatus
  birthYear               Int
  residence               String
  height                  Float
  weight                  Float
  confidentFacialBodyPart String?
  educationLevel          EducationLevel
  graduatedUniversity     String?
  workplace               String?
  job                     String?
  annualIncome            AnnualIncome?
  assetsValue             AssetsValue?
  mbti                    MBTI?
  characteristics         String?
  hobby                   String
  exercisePerWeek         ExercisePerWeek
  exerciseType            String?
  isSmoker                Boolean
  isDrinker               Boolean
  alcoholConsumption      String?
  alcoholTolerance        String?
  religion                Religion
  hasCar                  Boolean
  hasTattoo               Boolean
  hasPet                  Boolean
  datingStyle             String
  contactStyle            String?
  marriagePlan            String?
  selfIntroduction        String
  images                  DraftMemberImage[]
  videos                  DraftMemberVideo[]
  audios                  DraftMemberAudio[]

  idealMinAgeBirthYear       Int?
  idealMaxAgeBirthYear       Int?
  idealRegions               Region[]
  idealMinHeight             Float?
  idealMaxHeight             Float?
  idealBodyShapes            BodyShape[]
  idealFacialBodyPart        String?
  idealEducationLevel        EducationLevel?
  idealSchoolLevel           String?
  idealNonPreferredWorkplace String?
  idealNonPreferredJob       String?
  idealMinAnnualIncome       AnnualIncome?
  idealPreferredMbtis        MBTI[]
  idealNonPreferredMbtis     MBTI[]
  idealCharacteristics       String?
  idealIsSmokerOk            Boolean
  idealPreferredReligions    Religion[]
  idealNonPreferredReligions Religion[]
  idealIsTattooOk            Boolean
  idealTypeDescription       String

  dealBreakers     BasicCondition[] @default([])
  highPriorities   BasicCondition[] @default([])
  mediumPriorities BasicCondition[] @default([])
  lowPriorities    BasicCondition[] @default([])

  referrerCode String?
  memo         String?

  personalInfoConsent Boolean

  status DraftStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DraftStatus {
  PENDING
  REJECTED
  APPROVED
}

model DraftMemberImage {
  id            String           @id @default(cuid())
  draftMember   DraftBasicMember @relation(fields: [draftMemberId], references: [id], onDelete: Cascade)
  draftMemberId String
  bucketPath    String
}

model MemberImageV2 {
  id          String        @id @default(cuid())
  member      BasicMemberV2 @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String
  bucketPath  String
  index       Int
  customWidth Int?
}

model DraftMemberVideo {
  id            String           @id @default(cuid())
  draftMember   DraftBasicMember @relation(fields: [draftMemberId], references: [id], onDelete: Cascade)
  draftMemberId String
  bucketPath    String
}

model MemberVideoV2 {
  id         String        @id @default(cuid())
  member     BasicMemberV2 @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   String
  bucketPath String
  index      Int
}

model DraftMemberAudio {
  id            String           @id @default(cuid())
  draftMember   DraftBasicMember @relation(fields: [draftMemberId], references: [id], onDelete: Cascade)
  draftMemberId String
  bucketPath    String
}

model MemberAudio {
  id         String        @id @default(cuid())
  member     BasicMemberV2 @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   String
  bucketPath String
  index      Int
}

enum MemberStatus {
  PENDING
  ACTIVE
  INACTIVE
  DELETED
}

model BasicMemberProfileV2 {
  id       String        @id @default(cuid())
  member   BasicMemberV2 @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String        @unique

  birthYear      Int
  residence      String
  height         Float
  education      String
  job            String
  annualIncome   String?
  assetsValue    String?
  mbti           String?
  hobby          String?
  characteristic String?
  lifePhilosophy String?
  isSmoker       String
  religion       String

  selfIntroduction     String?
  idealTypeDescription String?

  datingStyle  String?
  contactStyle String?
  marriagePlan String?
}

model BasicMatchV2 {
  id           String          @id @default(cuid())
  pendingByV2  BasicMemberV2[] @relation(name: "pendingMatchMemberV2")
  rejectedByV2 BasicMemberV2[] @relation(name: "rejectedMatchMemberV2")
  acceptedByV2 BasicMemberV2[] @relation(name: "acceptedMatchMemberV2")
  status       MatchStatus
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  sentAt       DateTime?

  @@index([status])
}

model MegaphoneMatch {
  id               String                      @id @default(cuid())
  sender           BasicMemberV2               @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "megaphoneMatchSender")
  senderId         String
  receiver         BasicMemberV2               @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "megaphoneMatchReceiver")
  receiverId       String
  status           MatchStatus
  senderStatus     MegaphoneMatchMemberStatus?
  receiverStatus   MegaphoneMatchMemberStatus?
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  sentToReceiverAt DateTime?
  sentToSenderAt   DateTime?

  @@unique([senderId, receiverId])
  @@index([status])
  @@index([senderStatus])
  @@index([receiverStatus])
  @@index([senderId])
  @@index([receiverId])
}

enum MegaphoneMatchMemberStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model BasicBlacklistItemV2 {
  id            String        @id @default(cuid())
  blacklister   BasicMemberV2 @relation(name: "blacklisterV2", fields: [blacklisterId], references: [id], onDelete: Cascade)
  blacklisterId String
  target        BasicMemberV2 @relation(name: "blacklistTargetV2", fields: [targetId], references: [id], onDelete: Cascade)
  targetId      String
  createdAt     DateTime      @default(now())

  @@unique([blacklisterId, targetId])
}

enum Region {
  SEOUL
  SOUTH_GYEONGGI
  NORTH_GYEONGGI
  INCHEON_BUCHEON
  SEOUL_OR_GYEONGGI
  GYEONGSANG
  CHUNGCHEONG
  JEOLLA
  GANGWON
  JEJU
  WITHIN_ONE_HOUR
  OTHER
}

enum FashionStyle {
  CASUAL
  STREET
  VINTAGE
  MODERN
  FEMININE
  DANDY
  MINIMAL
  MAXIMAL
  CLASSIC
  SPORTY
}

enum WearsGlasses {
  ALWAYS
  SOMETIMES
  NEVER
}

enum Eyelid {
  SINGLE
  OUTER_DOUBLE
  INNER_DOUBLE
  OTHER
}

enum EducationLevel {
  ELEMENTARY_SCHOOL_GRADUATE
  MIDDLE_SCHOOL_GRADUATE
  HIGH_SCHOOL_GRADUATE
  ASSOCIATE_DEGREE
  BACHELOR_DEGREE
  MASTER_DEGREE
  DOCTORATE_DEGREE
}

enum OccupationStatus {
  EMPLOYED
  ENTREPRENEUR
  STUDENT
  UNEMPLOYED
}

enum AnnualIncome {
  LT_30M
  GTE_30M_LT_50M
  GTE_50M_LT_70M
  GTE_70M_LT_100M
  GTE_100M_LT_150M
  GTE_150M_LT_200M
  GTE_200M_LT_300M
  GTE_300M_LT_500M
  GTE_500M
}

enum AssetsValue {
  LT_30M
  GTE_30M_LT_50M
  GTE_50M_LT_100M
  GTE_100M_LT_300M
  GTE_300M_LT_500M
  GTE_500M_LT_1B
  GTE_1B_LT_2B
  GTE_2B_LT_5B
  GTE_5B
}

enum BooksReadPerYear {
  ZERO
  GTE_1_LT_5
  GTE_5_LT_10
  GTE_10
}

enum PlannedNumberOfChildren {
  NONE
  ONE
  TWO
  GTE_THREE
  NO_INTENTION_OF_MARRIAGE
}

enum ExercisePerWeek {
  NONE
  ONE_TO_TWO
  THREE_TO_FOUR
  FIVE_OR_MORE
}

enum ContactFrequency {
  SPECIAL_OCCASIONALLY
  ONCE_OR_TWICE_A_DAY
  OCCASIONALLY
  ALL_DAY
  OTHER
}

enum ContactMethod {
  MESSAGE
  CALL
  OTHER
}

enum DrinkingFrequency {
  NEVER
  ONLY_WHEN_NECESSARY
  OCCASIONALLY
  OFTEN
  ALWAYS
  OTHER
}

enum BasicCondition {
  AGE
  REGION
  HEIGHT
  BODY_SHAPES
  EYELID
  FACIAL_BODY_PART
  EDUCATION_LEVEL
  SCHOOL_LEVEL
  OCCUPATION_STATUS
  NON_PREFERRED_WORKPLACE_SCHOOL
  NON_PREFERRED_JOB
  PREFERRED_MBTIS
  NON_PREFERRED_MBTIS
  IS_SMOKER_OK
  DRINKING_FREQUENCY
  PREFERRED_RELIGIONS
  NON_PREFERRED_RELIGIONS
  MIN_ANNUAL_INCOME
  MIN_ASSETS_VALUE
  HOBBY
  BOOKS_READ_PER_YEAR
  CHARACTERISTICS
  IS_TATTOO_OK
  EXERCISE_PER_WEEK
  SHOULD_HAVE_CAR
  IS_GAMING_OK
  IS_PET_OK
}

model Place {
  id            String         @id @default(cuid())
  name          String
  description   String?
  blogUrl       String
  district      SeoulDistrict
  customRegions CustomRegion[]
  cuisineType   CuisineType

  @@index([district])
}

enum SeoulDistrict {
  GANGNAM
  GANGDONG
  GANGBUK
  GANGSEO
  GWANAK
  GWANGJIN
  GURO
  GEUMCHEON
  NOWON
  DOBONG
  DONGDAEMUN
  DONGJAK
  MAPO
  SEODAEMUN
  SEOCHO
  SEONGDONG
  SEONGBUK
  SONGPA
  YANGCHEON
  YEONGDEUNGPO
  YONGSAN
  EUNPYEONG
  JONGNO
  JUNG
  JUNGNANG
}

// NOTE: 새 값 추가하면 '커스텀_지역_라벨'도 추가해야 함
enum CustomRegion {
  GANGNAM // 강남
  GANGNAM_STATION // 강남역
  JAMSIL // 잠실
}

enum CuisineType {
  KOREAN
  CHINESE
  JAPANESE
  WESTERN
  OTHER
}

enum MarriageStatus {
  SINGLE
  MARRIED
  DIVORCED
}

model FripReview {
  id        String     @id @default(cuid())
  nickname  String
  rating    FripRating
  writtenAt DateTime
  content   String
  option    String
  priority  Int

  @@index([priority])
}

enum FripRating {
  FOUR_POINT_FIVE
  FIVE
}
